{"version":3,"sources":["Login/DisplayName.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayName","props","updateFirstName","event","setState","firstName","target","value","updateLastName","lastName","edit","isEdit","save","oldFirstName","state","oldLastName","cancel","oldFirstname","oldLastname","Display","for","id","type","placeholder","defaultValue","onChange","e","onClick","bind","this","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAzBT,EA8BnBC,eAAiB,SAACL,GAChB,EAAKC,SAAS,CACZK,SAAUN,EAAMG,OAAOC,SAhCR,EAqCnBG,KAAO,WACL,EAAKN,SAAS,CACZO,QAAQ,KAvCO,EA4CnBC,KAAO,WACL,EAAKR,SAAS,CACZS,aAAc,EAAKC,MAAMT,UACzBU,YAAa,EAAKD,MAAML,SACxBE,QAAQ,KAhDO,EAsDnBK,OAAS,WACP,EAAKZ,SAAS,CACZC,UAAW,EAAKS,MAAMG,aACtBR,SAAU,EAAKK,MAAMI,YACrBP,QAAQ,KA1DO,EA8DnBQ,QAAU,WAER,OAAI,EAAKL,MAAMH,OAEX,8BAKE,iCACE,uBAAOS,IAAI,OAAX,yBACA,uBACEC,GAAG,YACHC,KAAK,OACLC,YAAY,aACZC,aAAc,EAAKV,MAAMT,UACzBoB,SAAU,SAACC,GACT,EAAKxB,gBAAgBwB,MAGzB,uBACA,uBAAON,IAAI,OAAX,wBACA,uBACEC,GAAG,WACHC,KAAK,OACLC,YAAY,YACZC,aAAc,EAAKV,MAAML,SACzBgB,SAAU,SAACC,GACT,EAAKlB,eAAekB,MAGxB,uBACA,+CAAkB,EAAKZ,MAAMT,aAC7B,8CAAiB,EAAKS,MAAML,YAC5B,wBAAQkB,QAAS,EAAKf,KAAtB,kBACA,iDAQJ,gCACE,+CAAkB,EAAKE,MAAMT,aAC7B,8CAAiB,EAAKS,MAAML,YAC5B,wBAAQkB,QAAS,EAAKjB,KAAtB,sBAzGN,EAAKI,MAAQ,CAEXT,UAAWJ,EAAMI,UACjBI,SAAUR,EAAMQ,SAEhBI,aAAc,GACdE,YAAa,GACbJ,QAAQ,GAGV,EAAKT,gBAAkB,EAAKA,gBAAgB0B,KAArB,gBACvB,EAAKpB,eAAiB,EAAKA,eAAeoB,KAApB,gBACtB,EAAKlB,KAAO,EAAKA,KAAKkB,KAAV,gBACZ,EAAKhB,KAAO,EAAKA,KAAKgB,KAAV,gBACZ,EAAKZ,OAAS,EAAKA,OAAOY,KAAZ,gBAjBG,E,qDAoHjB,OAAO,8BAAMC,KAAKV,gB,GArHmBW,aCCpBC,E,uKAEjB,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CAAa3B,UAAW,OAAQI,SAAU,gB,GALnBqB,aCQlBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46c77807.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Proptypes from \"prop-types\";\n\nexport default class DisplayName extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      //firstName and lastName will have the props taken from App.js.\n      firstName: props.firstName, //John\n      lastName: props.lastName, //Doe\n      //oldFirstName and oldLastName will be blank and will the firstName and lastName on saving.\n      oldFirstName: \"\",\n      oldLastName: \"\",\n      isEdit: false,\n    };\n\n    this.updateFirstName = this.updateFirstName.bind(this);\n    this.updateLastName = this.updateLastName.bind(this);\n    this.edit = this.edit.bind(this);\n    this.save = this.save.bind(this);\n    this.cancel = this.cancel.bind(this);\n  }\n\n  //this will rerender the the name as its being updated\n  //we seperated the first and last name so that changing one doesn't override the other.\n  //because we're passing in an event, we do not need to bind the function\n  updateFirstName = (event) => {\n    this.setState({\n      firstName: event.target.value,\n    });\n  };\n\n  //this would allow you to see the change real time.\n  updateLastName = (event) => {\n    this.setState({\n      lastName: event.target.value,\n    });\n  };\n\n  //if you press edit, you want to edit so isEdit is true.\n  edit = () => {\n    this.setState({\n      isEdit: true,\n    });\n  };\n  //if you press save, you are not editing any more so isEdit would be false.\n  //it will update the old names with the name latest name.\n  save = () => {\n    this.setState({\n      oldFirstName: this.state.firstName,\n      oldLastName: this.state.lastName,\n      isEdit: false,\n    });\n  };\n\n  //if you press cancel, you are not editing any more so isEdit would be false.\n  //will display the old first and last name.\n  cancel = () => {\n    this.setState({\n      firstName: this.state.oldFirstname,\n      lastName: this.state.oldLastname,\n      isEdit: false,\n    });\n  };\n\n  Display = () => {\n    //if we press edit...\n    if (this.state.isEdit) {\n      return (\n        <div>\n          {/*\n          show the form that allows you to change first and last name.\n          Along with a save and cancel button\n      */}\n          <form>\n            <label for=\"Name\">First Name:</label>\n            <input\n              id=\"firstName\"\n              type=\"text\"\n              placeholder=\"First Name\"\n              defaultValue={this.state.firstName}\n              onChange={(e) => {\n                this.updateFirstName(e);\n              }}\n            ></input>\n            <br></br>\n            <label for=\"Name\">Last Name:</label>\n            <input\n              id=\"lastName\"\n              type=\"text\"\n              placeholder=\"Last Name\"\n              defaultValue={this.state.lastName}\n              onChange={(e) => {\n                this.updateLastName(e);\n              }}\n            ></input>\n            <br></br>\n            <div>First Name: {this.state.firstName}</div>\n            <div>Last Name: {this.state.lastName}</div>\n            <button onClick={this.save}>Save</button>\n            <button>Cancel</button>\n          </form>\n        </div>\n      );\n    } else {\n      //if isEdit is false...\n      //Display the name and the edit button.\n      return (\n        <div>\n          <div>First Name: {this.state.firstName}</div>\n          <div>Last Name: {this.state.lastName}</div>\n          <button onClick={this.edit}>Edit</button>\n        </div>\n      );\n    }\n  };\n\n  //call the Display method which will let the render know what to display.\n  render() {\n    return <div>{this.Display()}</div>;\n  }\n}\n\nDisplayName.propTypes = {\n  firstName: Proptypes.string,\n  lastName: Proptypes.string,\n};\n","import \"./App.css\";\nimport DisplayName from \"./Login/DisplayName.jsx\";\nimport { Component } from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <DisplayName firstName={\"John\"} lastName={\"Doe\"} />\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}